Using System
Using System.Collections
Using System.Collections.Generic
Using System.Text
Using System.Text.RegularExpressions
Using ASNA.DataGateHelper


DclNamespace TestPagedData

// Another example using a different file.

BegClass PageStates Access(*Public) 
    DclFld States Type(List(*Of StatePageModel)) New()

    // Declare the `PagedData` class.
    DclFld pd Type(PagedData) WithEvents(*Yes)  

    // Declare DB connection.
    DclDB DGDB DBName('*Public/Leyland') 

    // Close the DB connection before this class goes out of scope.
    BegSr Close Access(*Public) 
        Disconnect DGDB 
    EndSr

    // Fetch a page of data.
    BegFunc GetPage Access(*Public) Type(*Boolean) 
        DclSrParm PageNumber Type(*Integer4) 
        DclSrParm PageSize TYpe(*Integer4) 
        // Instance the PagedData class. 

        // 1. DGDB = DG database connection to use for RPG program call.
        // 2. 'qtemp' = target library for work file.
        // 3. 'rpzimmie' = library containing program to call.
        // 4. 'sqlimmed' = program to call.
        // 5. `PAGE_SIZE` = page size to produce (See `PAGE_SIZE` constant)
        // 6. `*TypeOf(CustomerPageModel)` tells the `PagedData` class what object type to populate for each row read.

        pd = *New PagedData(DGDB, 'qtemp', 'rpzimmie', 'sqlimmed', PageSize, *TypeOf(StatePageModel)) 

        // Clear the `States` collection before each page read.
        States.Clear()

        // Add the SELECT clause.
        pd.AddSQLSelect('SELECT state, abbrev')   

        // Add the FROM clause. There must be field in this file that match the fields in the `CustomerPageModel` class.
        pd.AddSQLFrom('FROM examples/states')  


        // Add the _optional_ WHERE clause.
        // pd.AddSQLWhere('WHERE where ....') 

        // Add the ORDER BY clause.
        // It's possible to change the ORDER BY clause at runtime, but if you do, be sure to also set the page number back to 1.
        pd.AddSQLOrderBy('ORDER BY abbrev, state')  

        //  Query and write the page data. 
        //  SQL's OFFSET value is zero-based. An OFFSET of zero gets you page 1. To help keep you sane, the 
        //  page number provided to the `WriteThenReadTempFile` method is one-based (ie, when PageNumber = 1 you get page 1.) 
        //  A "page" of data is derived by SQL with its LIMIT and OFFSET classes and the ORDER BY clause governs the arrival
        //  sequence of the rows into the list and how pages are determined. 
        pd.WriteThenReadTempFile(PageNumber)

        // Immediately after calling `WriteThenReadTempFile` the input file has been queried
        // and its result set written to a work file. The work file has been read and the 
        // `States` collection populated. (See the `OnAfterRowRead` event handler below.)
        
        // The work file schema is defined by the `CustomerPageModel` class. The fields 
        // defined in your SELECT class govern what fields are written to the work file. 

        // At this point, the `PagedData` class has these properties available for your use:

        // * `pd.MillisecondsToCreateWorkFile` - Integer value of milliseconds it took to create the work file.
        // * `pd.MillisecondsToReadWorkFile`  - Integer value of the milliseconds it to to to read the work file.
        // * `pd.MoreRecords` - Boolean value that is *True if there are more pages of records to read.
        // * `pd.RowsRead` - Integer value of actual number of records read. It may be less that the page 
        // size requested if EOF was reached before full page was read.

        // Usually, here you would bind the `States` collection to grid control. In ASP.NET you would do
        // this:
        // ```
        // gridviewStates.DataSource = States
        // gridviewStates.DataBind() 
        // ```

        // For this example, iterate over the `States` collection and show its fields.
        Console.WriteLine("Page number: {0}", PageNumber)             
        ForEach State Type(StatePageModel) Collection(*This.States) 
            Console.WriteLine("{0} - {1}", State.State, State.Abbrev) 
        EndFor 
        Console.WriteLine("----------------------------------------") 
        LeaveSr pd.MoreRecords 
    EndFunc 

    BegSr OnAfterRowRead Event(pd.AfterRowRead) 
        DclSrParm Sender Type(*Object)
        DclSrParm e Type(ASNA.DataGateHelper.AfterRowReadArgs) 

        // This event is raised by the `PagedData` class for each row read.
        // The `e.CustomClassInstance` argument is the `CustomerPageModel` class instance 
        // created by `PagedData` for a given row. Cast that instance 
        // as a `CustomerPageModel` and add it to the `States` collection.

        // Caution: don't forget to add this event handler and to add the 
        // code below to add the PageModel to the PageModel collection. If you forget
        // this, the program finishes normally but the PageModel collection is empty. 
        // And, I promise, will drive you crazy! 
        States.Add(e.CustomClassInstance *As StatePageModel) 
    EndSr
EndClass

// The `StatePageModel's` fields must be present in the file specified in the SQL's `FROM` clause.
// You can name this class anything you want, but a good convention is to have it end with 
// 'PageModel' to convey its purpose. It is usually a good practice to put every class in its own 
// source member. For example purposes here it is included in this source member.
BegClass StatePageModel Access(*Public) 
    DclProp State Type(*String) Access(*Public) 
    DclProp Abbrev Type(*String) Access(*Public)
EndClass

